//https://ga-dev-tools.appspot.com/embed-api/third-party-visualizations/
//https://github.com/googleanalytics/ga-dev-tools/blob/master/src/javascript/embed-api/components/active-users.js#L69-L87

angular.module('cruprojects', [])
.value('googleAnalyticsClientId', '<%= Rails.configuration.google_client_id %>')
  //TODO: import map and ga real time clients as services
  //TODO: split map into realtime-ga-map directive
.controller('EncouragementCtrl', function($scope, $q, googleAnalyticsClientId) {
  var that = this;

  that.map = new google.maps.Map(document.getElementById('map'), {
    zoom: 2,
    center: {lat: 17.8786938, lng: -28.8084722},
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  //TODO: get real icons
  that.apps = [
    {
      id: 84323330,
      name: 'God Tools',
      icon: '<%= image_path("godtools.png") %>',
      totalActiveUsers: 0,
      activeUsersByLocation: []
    },
    {
      id: 59955759,
      name: 'MPDX',
      icon: '<%= image_path("mpdx.png") %>',
      totalActiveUsers: 0,
      activeUsersByLocation: []
    }
  ];

  that.options = {
    animateMap: true,
    animateMapFrequency: 5000,
    polling: true,
    pollingFrequency: 60000
  };

  $scope.start = function() {

    /**
     * Authorize the user immediately if the user has already granted access.
     * If no access has been created, render an authorize button inside the
     * element with the ID "embed-api-auth-container".
     */
    gapi.analytics.auth.authorize({
      container: 'google-auth-container',
      clientid: googleAnalyticsClientId
    });

    // Wait until the user is authorized.
    if (gapi.analytics.auth.isAuthorized()) {
      that.startPollingForApps();
    }
    else {
      gapi.analytics.auth.once('success', that.startPollingForApps);
    }
  };

  that.startPollingForApps = function() {

    var element = document.getElementById('google-auth-container');
    element.parentNode.removeChild(element);

    var appPollingOffset = that.options.pollingFrequency / that.apps.length;
    for (appIndex in that.apps) {

      setTimeout(function() {
        that.pollForApp(that.apps[appIndex]);
      }, appIndex * appPollingOffset);
    }

  };

  that.pollForApp = function(app) {

    that.removeAppFromMap(app, that.map);

    that.getActiveUsers(app).then(function (appWithLocation) {
      that.putAppOnMap(appWithLocation)
    }, function (error) {
      console.log(error.message);
    });

    setTimeout(function() {
      if (that.options.polling) {
        that.pollForApp(app);
      }
    }, that.options.pollingFrequency);

  };

  that.rotateMap = function() {
    setTimeout(function(){
      var location = that.map.getCenter();
      location.lng += 5;
      that.map.panTo(location);
      if (that.options.animateMap) {
        that.rotateMap();
      }
    }, that.options.animateMapFrequency);
  };

  that.getActiveUsers = function(app) {

    var deferred = $q.defer();

    gapi.client.analytics.data.realtime
      .get({ids:'ga:' + app.id, metrics:'rt:activeUsers', dimensions: 'rt:country,rt:region,rt:city'})
      .execute(function(response) {

        var countryHeader = 0;
        var regionHeader = 1;
        var cityHeader = 2;
        var activeUserHeader = 3;
        var newValue = response.totalResults || 0;
        var oldValue = app.totalActiveUsers;

        if (newValue != oldValue) {
          app.totalActiveUsers = newValue;
        }

        for (header = 0; header < response.columnHeaders; header++) {
          if (response.columnHeader[header].name == 'rt:country') {
            countryHeader = header;
          } else if (response.columnHeader[header].name == 'rt:region') {
            regionHeader = header;
          } else if (response.columnHeader[header].name == 'rt:city') {
            cityHeader = header;
          } else if (response.columnHeader[header].name == 'rt:activeUsers') {
            activeUserHeader = header;
          }
        }

        app.activeUsersByLocation = [];
        var locationPromises = [], row;

        for(rowIndex in response.rows) {

          row = response.rows[rowIndex];
          var usersAtLocation = {
            id: row[countryHeader] + '-' + row[cityHeader],
            country: row[countryHeader],
            region: row[regionHeader],
            city: row[cityHeader],
            activeUsers: row[activeUserHeader]
          };

          locationPromise = that.getLocation(usersAtLocation);
          locationPromises.push(locationPromise);

          locationPromise.then(function(location){
            usersAtLocation.location = location;
          }, function(error){

          });

          app.activeUsersByLocation.push(usersAtLocation);
        }

        $q.all(locationPromises).then(function(allLocations) {
          deferred.resolve(app);
        }, function(error) {
          deferred.reject({message: 'One of the locations for ' + app.name + ' failed due to error: ' + error});
        });

      });

    return deferred.promise;
  };

  that.getLocation = function(usersAtLocation) {

    var deferred = $q.defer();
    var location = localStorage.getItem(usersAtLocation.id);

    if (location) {
      deferred.resolve(angular.fromJson(location));
      return deferred.promise;
    }

    //TODO: get real instance of geocoder
    var geocoder = new google.maps.Geocoder();
    var address = usersAtLocation.city + ', ' + usersAtLocation.region + ' ' + usersAtLocation.country;
    geocoder.geocode({'address': address}, function(results, status) {

      if (status === google.maps.GeocoderStatus.OK) {
        locationResult = results[0].geometry.location;
        location = {lat:locationResult.lat(), lng:locationResult.lng()};
        localStorage.setItem(usersAtLocation.id, angular.toJson(location));
        deferred.resolve(location);
      } else {
        deferred.reject({message:'Geocode was not successful for the following reason: ' + status});
      }

    });

    return deferred.promise;
  };

  that.putAppOnMap = function(app, map) {

    map = map || that.map;
    var marker, usersAtLocation;
    for (usersAtLocationIndex in app.activeUsersByLocation) {

      usersAtLocation = app.activeUsersByLocation[usersAtLocationIndex];
      if (usersAtLocation.location) {
        //TODO: get real instance of marker
        usersAtLocation.marker = new google.maps.Marker({
          map: map,
          icon: app.icon,
          label: usersAtLocation.activeUsers,
          draggable: false,
          position: usersAtLocation.location
        });
      }

    }

  };

  that.removeAppFromMap = function(app) {

    var marker, usersAtLocation;

    for (usersAtLocationIndex in app.activeUsersByLocation) {

      usersAtLocation = app.activeUsersByLocation[usersAtLocationIndex];
      if (usersAtLocation.marker) {
        usersAtLocation.marker.setMap(null);
        delete usersAtLocation.marker;
      }

    }

  };

})
//TODO: figure out what really needs to be injected here
.run(function () {

  // add Google Analytics Script at the end of the page
  var gaCode = document.createTextNode('(function(w,d,s,g,js,fs){ g=w.gapi||(w.gapi={});g.analytics={q:[],ready:function(f){this.q.push(f);}}; js=d.createElement(s);fs=d.getElementsByTagName(s)[0]; js.src="https://apis.google.com/js/platform.js"; fs.parentNode.insertBefore(js,fs);js.onload=function(){g.load("analytics");}; }(window,document,"script"));');
  var scriptTag = document.createElement('script');
  scriptTag.type = 'text/javascript';
  scriptTag.appendChild(gaCode);
  document.body.appendChild(scriptTag);

  // if ga is ready -> inform service
  gapi.analytics.ready(function () {
    angular.element(document.getElementById("map-container")).scope().start();
  });
});